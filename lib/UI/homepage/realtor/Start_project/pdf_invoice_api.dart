import 'dart:developer';
import 'dart:io';
import 'dart:typed_data';
import 'package:dazllapp/UI/homepage/realtor/Start_project/pdf_api.dart';
import 'package:dazllapp/model/Realtor/getComplitedPhd.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

class ImageModel {
  int id;
  dynamic image;
  ImageModel({
    required this.id,
    required this.image,
  });
}

class PdfInvoiceApi {
  static List<ImageModel> listImage = [];

  static Future<File> generate(FeatureElement? item, String price) async {
    final pdf = pw.Document();
    listImage.clear();

    log('vsdkbjkvsk ------- ');
    final imageByteData = await rootBundle.load('assets/images/logo.jpg');
    // Convert ByteData to Uint8List
    final imageUint8List = imageByteData.buffer.asUint8List();

    final image = pw.MemoryImage(imageUint8List);
    for (int i = 0; i < item!.images!.length; i++) {
      listImage.add(ImageModel(
          id: item.featureId!,
          image: await networkImage(item.images![i].toString())));
    }
    pdf.addPage(
      pw.MultiPage(
        header: (context) => buildHeader(logoImage: image),
        build: (context) => [
          pw.SizedBox(height: 0.5 * PdfPageFormat.cm),
          buildCustomerItem(feature: item, price: price),
        ],
        footer: (context) => buildFooter(),
      ),
    );

    return PdfApi.saveDocument(
        name:
            'DAZL ${DateFormat('MM_dd_yyyy_HH_mm').format(DateTime.now())}.pdf',
        pdf: pdf);
  }
}

pw.Widget buildHeader({required logoImage}) {
  return pw.Column(
    crossAxisAlignment: pw.CrossAxisAlignment.start,
    children: [
      pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.start,
        children: [
          pw.Image(logoImage, height: 50),
          pw.SizedBox(width: 0.5 * PdfPageFormat.cm),
          buildSupplierAddress('DAZL'),
        ],
      ),
      pw.SizedBox(height: 0.1 * PdfPageFormat.cm),
      pw.Divider(),
    ],
  );
}

pw.Widget buildSupplierAddress(String supplier) => pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          supplier,
          style: pw.TextStyle(
            fontWeight: pw.FontWeight.bold,
            fontSize: 18,
          ),
          textAlign: pw.TextAlign.center,
        ),
      ],
    );

pw.Widget buildCustomerItem(
    {required FeatureElement? feature, required price}) {
  return pw.Column(
    mainAxisAlignment: pw.MainAxisAlignment.center,
    children: [
      // pw.RichText(
      //   text: pw.TextSpan(
      //     text: 'Inventory Number : ',
      //     style: pw.TextStyle(
      //       fontWeight: pw.FontWeight.normal,
      //       fontSize: 16.0,
      //     ),
      //     children: [
      //       pw.TextSpan(
      //         text: feature!.imageDesc,
      //         style: pw.TextStyle(
      //           fontWeight: pw.FontWeight.bold,
      //           fontSize: 16.0,
      //         ),
      //       ),
      //     ],
      //   ),
      // ),
      pw.ListView.builder(
        itemCount: PdfInvoiceApi.listImage.length,
        itemBuilder: (context, subIndex) {
          log("fdkhjn " + subIndex.toString());
          return pw.Column(
            children: [
              pw.Row(
                children: [
                  PdfInvoiceApi.listImage[subIndex].id == feature!.featureId
                      ? pw.Container(
                          height: 2.5 * PdfPageFormat.cm,
                          width: 2.8 * PdfPageFormat.cm,
                          decoration: pw.BoxDecoration(
                            border: pw.Border.all(),
                            // color: PdfColors.grey,
                          ),
                          child: pw.Image(
                            PdfInvoiceApi.listImage[subIndex].image == ''?'https://dazlpro.com/images/smallCardimages/01-Inspired-Outdoor-Img.jpg':PdfInvoiceApi.listImage[subIndex].image,
                            fit: pw.BoxFit.fill,
                          ),
                        )
                      : pw.SizedBox(),
                  pw.SizedBox(width: 0.8 * PdfPageFormat.cm),
                  // PdfInvoiceApi.listImage[subIndex].id == hhgData[index].id
                  //     ?
                  pw.Column(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    mainAxisAlignment: pw.MainAxisAlignment.spaceEvenly,
                    children: [
                      pw.RichText(
                        text: pw.TextSpan(
                          text: 'Feature : ',
                          style: pw.TextStyle(
                            fontWeight: pw.FontWeight.normal,
                            fontSize: 16.0,
                          ),
                          children: [
                            pw.TextSpan(
                              text: feature.featureName,
                              style: pw.TextStyle(
                                fontWeight: pw.FontWeight.bold,
                                fontSize: 16.0,
                              ),
                            ),
                          ],
                        ),
                      ),
                      pw.SizedBox(height: 0.3 * PdfPageFormat.cm),
                      pw.RichText(
                        text: pw.TextSpan(
                          text: 'Comments : ',
                          style: pw.TextStyle(
                            fontWeight: pw.FontWeight.normal,
                            fontSize: 16.0,
                          ),
                          children: [
                            pw.TextSpan(
                              text: feature.imageDesc,
                              style: pw.TextStyle(
                                fontWeight: pw.FontWeight.bold,
                                fontSize: 16.0,
                              ),
                            ),
                          ],
                        ),
                      ),
                      pw.SizedBox(height: 0.3 * PdfPageFormat.cm),
                      pw.RichText(
                        text: pw.TextSpan(
                          text: 'PHD Price : ',
                          style: pw.TextStyle(
                            fontWeight: pw.FontWeight.normal,
                            fontSize: 16.0,
                          ),
                          children: [
                            pw.TextSpan(
                              text:
                                  "\$${NumberFormat.compactCurrency(decimalDigits: 2, symbol: "").format(int.parse(price))}",
                              style: pw.TextStyle(
                                fontWeight: pw.FontWeight.bold,
                                fontSize: 16.0,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  )
                  // : pw.SizedBox(),
                ],
              ),
              // PdfInvoiceApi.listImage[subIndex].id == feature
              //     ? pw.SizedBox(height: 0.5 * PdfPageFormat.cm)
              //     : pw.SizedBox(),
            ],
          );
        },
      ),
      // pw.Divider(color: PdfColors.grey200),
      pw.SizedBox(height: 0.5 * PdfPageFormat.cm)
    ],
  );
}

pw.Widget buildFooter() {
  return pw.Column(
    crossAxisAlignment: pw.CrossAxisAlignment.end,
    mainAxisAlignment: pw.MainAxisAlignment.start,
    children: [
      pw.Divider(),
      // buildText(title: 'Signature'),
    ],
  );
}

buildText({
  required String title,
  double width = double.infinity,
  pw.TextStyle? titleStyle,
  bool unite = false,
}) {
  final style = titleStyle ?? pw.TextStyle(fontWeight: pw.FontWeight.bold);

  return pw.Container(
    width: width,
    alignment: pw.Alignment.centerRight,
    child: pw.Column(
      children: [
        pw.SizedBox(height: 10),
        pw.Image(
          pw.MemoryImage(signatureCustom),
          height: 40,
        ),
        pw.SizedBox(height: 10),
        pw.Text(title, style: style),
      ],
    ),
  );
}

Uint8List signatureCustom = Uint8List.fromList([
  137,
  80,
  78,
  71,
  13,
  10,
  26,
  10,
  0,
  0,
  0,
  13,
  73,
  72,
  68,
  82,
  0,
  0,
  0,
  147,
  0,
  0,
  0,
  86,
  8,
  6,
  0,
  0,
  0,
  203,
  192,
  164,
  18,
  0,
  0,
  0,
  4,
  115,
  66,
  73,
  84,
  8,
  8,
  8,
  8,
  124,
  8,
  100,
  136,
  0,
  0,
  4,
  148,
  73,
  68,
  65,
  84,
  120,
  156,
  237,
  157,
  235,
  149,
  156,
  48,
  12,
  133,
  111,
  30,
  133,
  164,
  147,
  213,
  118,
  146,
  78,
  162,
  237,
  36,
  169,
  100,
  61,
  165,
  164,
  146,
  228,
  199,
  216,
  103,
  60,
  30,
  204,
  195,
  200,
  32,
  224,
  126,
  231,
  112,
  204,
  211,
  214,
  194,
  29,
  201,
  22,
  44,
  0,
  132,
  108,
  140,
  238,
  109,
  0,
  241,
  207,
  215,
  153,
  251,
  189,
  129,
  130,
  34,
  19,
  124,
  159,
  177,
  143,
  196,
  137,
  144,
  81,
  230,
  122,
  38,
  66,
  38,
  161,
  152,
  136,
  25,
  20,
  19,
  49,
  131,
  98,
  34,
  102,
  80,
  76,
  196,
  12,
  138,
  137,
  152,
  65,
  49,
  17,
  51,
  40,
  38,
  98,
  6,
  197,
  68,
  204,
  160,
  152,
  136,
  25,
  20,
  19,
  49,
  227,
  12,
  98,
  18,
  240,
  222,
  161,
  11,
  230,
  220,
  232,
  245,
  128,
  100,
  229,
  91,
  177,
  14,
  0,
  2,
  128,
  207,
  56,
  255,
  30,
  151,
  201,
  198,
  120,
  19,
  147,
  160,
  46,
  152,
  26,
  161,
  88,
  254,
  140,
  235,
  222,
  109,
  76,
  34,
  214,
  252,
  139,
  147,
  53,
  18,
  167,
  207,
  88,
  127,
  42,
  203,
  233,
  51,
  78,
  138,
  241,
  176,
  86,
  214,
  69,
  28,
  98,
  41,
  38,
  193,
  243,
  69,
  47,
  69,
  163,
  88,
  223,
  15,
  74,
  117,
  175,
  169,
  131,
  116,
  98,
  173,
  152,
  4,
  15,
  239,
  50,
  36,
  32,
  89,
  103,
  222,
  11,
  244,
  78,
  142,
  105,
  249,
  165,
  11,
  182,
  21,
  80,
  217,
  118,
  175,
  208,
  76,
  86,
  178,
  68,
  76,
  130,
  87,
  1,
  37,
  81,
  205,
  57,
  190,
  86,
  95,
  10,
  129,
  115,
  89,
  211,
  38,
  233,
  200,
  28,
  49,
  9,
  158,
  69,
  180,
  246,
  98,
  150,
  245,
  253,
  195,
  114,
  49,
  177,
  223,
  180,
  33,
  22,
  169,
  1,
  1,
  240,
  11,
  207,
  23,
  237,
  3,
  237,
  255,
  205,
  50,
  84,
  31,
  57,
  0,
  115,
  51,
  224,
  183,
  88,
  74,
  182,
  78,
  240,
  234,
  125,
  62,
  0,
  124,
  65,
  155,
  144,
  134,
  234,
  11,
  184,
  231,
  139,
  62,
  26,
  234,
  35,
  78,
  81,
  60,
  135,
  153,
  180,
  156,
  135,
  180,
  86,
  4,
  211,
  225,
  76,
  26,
  218,
  97,
  152,
  115,
  138,
  162,
  158,
  76,
  148,
  198,
  58,
  5,
  175,
  125,
  172,
  90,
  93,
  130,
  229,
  253,
  38,
  138,
  201,
  41,
  10,
  59,
  17,
  181,
  214,
  37,
  88,
  38,
  40,
  138,
  233,
  129,
  192,
  193,
  121,
  16,
  188,
  134,
  32,
  49,
  170,
  167,
  69,
  144,
  138,
  249,
  130,
  186,
  162,
  152,
  36,
  78,
  138,
  122,
  142,
  79,
  246,
  50,
  44,
  207,
  36,
  183,
  244,
  141,
  242,
  58,
  172,
  18,
  150,
  90,
  212,
  169,
  24,
  22,
  214,
  153,
  197,
  36,
  217,
  84,
  19,
  205,
  80,
  158,
  111,
  234,
  156,
  173,
  226,
  75,
  101,
  189,
  226,
  62,
  60,
  7,
  30,
  195,
  252,
  148,
  77,
  174,
  29,
  147,
  35,
  120,
  12,
  241,
  19,
  33,
  214,
  21,
  150,
  24,
  56,
  82,
  255,
  80,
  250,
  32,
  141,
  250,
  20,
  203,
  236,
  221,
  27,
  169,
  44,
  191,
  141,
  236,
  51,
  68,
  136,
  229,
  45,
  155,
  15,
  217,
  118,
  141,
  101,
  121,
  93,
  210,
  254,
  249,
  190,
  139,
  25,
  58,
  209,
  154,
  53,
  150,
  63,
  27,
  52,
  231,
  226,
  8,
  134,
  115,
  78,
  1,
  253,
  158,
  49,
  210,
  88,
  254,
  170,
  108,
  223,
  90,
  76,
  82,
  89,
  126,
  171,
  172,
  111,
  33,
  100,
  243,
  31,
  3,
  235,
  166,
  208,
  88,
  14,
  157,
  179,
  128,
  70,
  113,
  149,
  39,
  90,
  49,
  44,
  36,
  96,
  92,
  76,
  2,
  219,
  196,
  101,
  43,
  169,
  189,
  242,
  36,
  133,
  206,
  237,
  138,
  65,
  29,
  33,
  155,
  191,
  13,
  172,
  203,
  231,
  173,
  209,
  88,
  214,
  126,
  144,
  169,
  237,
  81,
  145,
  229,
  194,
  80,
  212,
  133,
  4,
  60,
  196,
  148,
  111,
  83,
  220,
  127,
  113,
  146,
  53,
  106,
  21,
  202,
  214,
  160,
  184,
  255,
  45,
  1,
  219,
  247,
  153,
  66,
  177,
  124,
  171,
  108,
  43,
  247,
  243,
  130,
  198,
  50,
  191,
  174,
  67,
  4,
  60,
  254,
  54,
  5,
  30,
  98,
  18,
  76,
  63,
  246,
  154,
  58,
  206,
  239,
  232,
  219,
  31,
  178,
  64,
  113,
  183,
  47,
  121,
  71,
  233,
  220,
  94,
  232,
  92,
  191,
  7,
  52,
  150,
  53,
  145,
  189,
  167,
  123,
  115,
  105,
  99,
  77,
  16,
  249,
  193,
  249,
  136,
  46,
  140,
  28,
  227,
  137,
  176,
  183,
  1,
  39,
  64,
  139,
  101,
  193,
  243,
  35,
  214,
  33,
  109,
  40,
  135,
  209,
  130,
  215,
  33,
  184,
  229,
  240,
  190,
  55,
  103,
  78,
  11,
  184,
  167,
  204,
  39,
  77,
  229,
  44,
  188,
  147,
  108,
  37,
  27,
  146,
  194,
  92,
  249,
  84,
  64,
  192,
  107,
  174,
  66,
  112,
  12,
  33,
  201,
  222,
  6,
  92,
  149,
  36,
  38,
  141,
  165,
  224,
  248,
  253,
  11,
  137,
  37,
  31,
  91,
  113,
  206,
  17,
  194,
  199,
  174,
  247,
  160,
  200,
  124,
  188,
  119,
  108,
  5,
  199,
  16,
  252,
  41,
  57,
  195,
  187,
  6,
  114,
  36,
  150,
  12,
  113,
  59,
  208,
  42,
  38,
  177,
  52,
  194,
  144,
  148,
  72,
  13,
  123,
  26,
  113,
  85,
  150,
  138,
  41,
  141,
  250,
  202,
  155,
  150,
  30,
  208,
  108,
  62,
  236,
  100,
  195,
  165,
  89,
  42,
  166,
  208,
  195,
  8,
  99,
  24,
  226,
  14,
  130,
  192,
  111,
  226,
  146,
  29,
  239,
  3,
  226,
  241,
  162,
  41,
  252,
  138,
  252,
  50,
  180,
  116,
  192,
  67,
  44,
  197,
  206,
  12,
  51,
  110,
  211,
  187,
  16,
  79,
  120,
  204,
  53,
  121,
  244,
  150,
  151,
  227,
  12,
  121,
  38,
  141,
  101,
  216,
  209,
  6,
  130,
  54,
  49,
  13,
  253,
  171,
  184,
  7,
  24,
  226,
  14,
  136,
  192,
  87,
  103,
  215,
  147,
  45,
  151,
  230,
  232,
  97,
  78,
  99,
  73,
  175,
  116,
  96,
  188,
  116,
  120,
  189,
  216,
  65,
  208,
  238,
  153,
  66,
  44,
  197,
  198,
  140,
  38,
  52,
  150,
  204,
  120,
  31,
  28,
  15,
  233,
  1,
  122,
  37,
  103,
  172,
  237,
  51,
  137,
  133,
  17,
  13,
  104,
  44,
  233,
  149,
  78,
  128,
  98,
  191,
  81,
  84,
  106,
  155,
  94,
  201,
  25,
  107,
  251,
  76,
  123,
  66,
  175,
  116,
  18,
  4,
  251,
  120,
  38,
  5,
  189,
  146,
  91,
  142,
  58,
  154,
  163,
  87,
  58,
  25,
  91,
  143,
  232,
  20,
  244,
  74,
  174,
  57,
  82,
  6,
  60,
  127,
  249,
  24,
  113,
  136,
  133,
  152,
  196,
  160,
  142,
  41,
  180,
  50,
  79,
  78,
  130,
  98,
  187,
  78,
  120,
  254,
  46,
  70,
  114,
  66,
  4,
  219,
  136,
  73,
  55,
  106,
  135,
  172,
  196,
  123,
  159,
  73,
  241,
  232,
  43,
  241,
  201,
  128,
  147,
  211,
  123,
  116,
  197,
  240,
  118,
  33,
  122,
  166,
  7,
  20,
  12,
  111,
  151,
  162,
  151,
  152,
  20,
  124,
  155,
  201,
  229,
  16,
  244,
  241,
  30,
  12,
  111,
  23,
  197,
  218,
  59,
  41,
  24,
  222,
  46,
  139,
  192,
  238,
  226,
  43,
  120,
  203,
  228,
  242,
  88,
  121,
  39,
  134,
  55,
  98,
  226,
  157,
  20,
  20,
  18,
  137,
  172,
  25,
  125,
  41,
  24,
  222,
  72,
  134,
  162,
  221,
  59,
  49,
  188,
  145,
  23,
  82,
  223,
  73,
  23,
  28,
  163,
  13,
  199,
  144,
  11,
  32,
  88,
  22,
  238,
  20,
  12,
  111,
  100,
  4,
  197,
  60,
  129,
  8,
  24,
  222,
  200,
  12,
  242,
  111,
  177,
  12,
  161,
  217,
  118,
  217,
  198,
  36,
  210,
  155,
  111,
  157,
  234,
  253,
  11,
  224,
  39,
  128,
  31,
  184,
  127,
  211,
  78,
  226,
  250,
  31,
  113,
  125,
  122,
  172,
  228,
  15,
  128,
  223,
  157,
  108,
  32,
  39,
  66,
  48,
  254,
  149,
  40,
  217,
  203,
  48,
  210,
  135,
  45,
  62,
  134,
  172,
  120,
  126,
  111,
  184,
  201,
  151,
  170,
  137,
  63,
  254,
  3,
  22,
  223,
  196,
  111,
  5,
  150,
  137,
  135,
  0,
  0,
  0,
  0,
  73,
  69,
  78,
  68,
  174,
  66,
  96,
  130
]);
